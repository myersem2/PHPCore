[PHPCore]

;;;;;;;;;;;;;;;;;;;;;;;
; About phpcore.ini   ;
;;;;;;;;;;;;;;;;;;;;;;;
; PHPCore's initialization file, generally called phpcore.ini, is responsible
; for configuring many of the aspects of PHPCore's behavior. This file is
; closely based off of PHP's configuration file since PHPCore purpose is to
; extend PHP and act as a core for projects.
; See PHP website for more information on PHP.
; https://www.php.net

; PHPCore attempts to find and load this configuration from a number of
; locations. The Base PHPCore ini is required and will throw a warning if not
; found. Subsequent configurations will be loaded and used to override or extend
; the previous configurations in the following order:
; 1. Base PHPCore ini location (e.g. /etc/phpcore/phpcore.ini) [REQUIRED]
; 2. The PHPCORERC environment variable. (e.g. PHPCORERC="~/phpcore.ini")
; 3. Current working directory
; See the PHPCore docs for more specific information.
; https://manual.phpcore.org/configuration

; The syntax of the file is extremely simple. Whitespace and lines beginning
; with a semicolon are silently ignored (as you probably guessed). Section
; headers (e.g. [Database]) are used to attached a configuration to a class
; (e.g. \PHPCore\Database). 

; The value can be a string, a number, one of the INI constants (On, Off, True,
; False, Yes, No and None), or a quoted string ("bar").

; Boolean flags can be turned on using the values 1, On, True or Yes.
; They can be turned off using the values 0, Off, False or No.

; An empty string can be denoted by simply not writing anything after the equal
; sign, or by using the None keyword:

; foo =         ; sets foo to an empty string
; foo = None    ; sets foo to an empty string
; foo = "None"  ; sets foo to the string 'None'

;;;;;;;;;;;;;;;;;;;
; About this file ;
;;;;;;;;;;;;;;;;;;;
; PHPCore comes packaged with a 'phpcore-default.ini' INI file. It is highly
; recommended you review and change these configurations for a production
; environment.

; --------------------------------------------------------------------------------------------------

;;;;;;;;;;;;;;;;;
; Core behavior ;
;;;;;;;;;;;;;;;;;

; This directive allows you to lock this config to a PHPCore version. This will
; throw an E_USER_WARNING if the PHPCore does not match this value. 
; https://manual.phpcore.org/configuration/version-lock
version_lock = "1.0"

; This directive allows you to disable certain functions.
; It receives a comma-delimited list of function names.
; https://manual.phpcore.org/configuration/disable-functions
disable_functions = None

; This directive allows you to disable certain classes.
; It receives a comma-delimited list of class names.
; https://manual.phpcore.org/configuration/disable-classes
disable_classes = None

; --------------------------------------------------------------------------------------------------

[Database]

; This directive section allows you to set up database connections to use the
; `Database:getInstance({conneciton_name})` static method for connections
; declared in this section. This will allow you to communicate with a database
; without having to supply credentials at run time. The 'main' connection name
; will be used as the default connection if no connections name is supplied.
; (e.g. `Database:getInstance()`). You may declare multiple alternate
; connections using the the prefix (e.g. `altX.dsn`) where 'X' denotes the
; alternate number.

; CSV of supported drivers
; See PHP PDO Drivers for more information and about using DSN.
; https://www.php.net/manual/en/book.pdo.php
supported_drivers = "mysql,sqlite"

; Main Database connection
main.dsn = "mysql:host=localhost;dbname=dev_test;charset=utf8mb4"
main.usr = "dev"
main.pwd = "dev-temp-password"

; Alternate 1 Database connection
alt1.dsn = "sqlite:"
alt1.usr = None
alt1.pwd = None

; Alternate 2 Database connection
;alt2.dsn = "sqlite:"
;alt2.usr = None
;alt2.pwd = None

; EOF //////////////////////////////////////////////////////////////////////////////////////////////
