#!/usr/bin/php
<?php declare(strict_types=1);
/**
 * PHPCore - CLI
 *
 * @author    Everett Myers <Me@EverettMyers.com>
 * @copyright Copyright (c) 2022, PHPCore
 * @link https://manual.phpcore.org/cli
 */

// -------------------------------------------------------------------------------------------------

include __DIR__ . DIRECTORY_SEPARATOR . 'bootstrap.php';

// =============================================================================
// Check and get options
// =============================================================================
$options = getopt('c:d:f:r:ihv', [
    'atleast-version:',
    'format:',
    'ini-item:',
    'format:',
    'information::',
    'ini-paths::',
    'version::',
    'help::',
]);
foreach ($argv as $opt) {
    if (str_starts_with($opt, '--') === true) {
        list($opt) = explode('=', $opt);
        if (isset($options[substr($opt, 2)]) === false) {
            trigger_error(
                "'{$opt}' is not a valid phpcore option, see 'phpcore --help' for allowed options",
                E_USER_ERROR
            );    
        }
    } elseif (str_starts_with($opt, '-') == true) {
        if (isset($options[substr($opt, 1)]) === false) {
            trigger_error(
                "'{$opt}' is not a valid phpcore option, see 'phpcore --help' for allowed options",
                E_USER_ERROR
            );    
        }
    }
}
unset($opt);

// =============================================================================
// OPTION: Version >> EXIT
// =============================================================================
if (in_array('-v', $argv) or in_array('--version', $argv)) {
    echo str_color('PHPCore', 'light_blue') . ' ' . str_color(CORE_VERSION, 'cyan') . ' (cli)' . PHP_EOL;
    echo 'Copyright (c) The PHPCore' . PHP_EOL;
    exit;
}

// =============================================================================
// OPTION: Help >> EXIT
// =============================================================================
if (in_array('-h', $argv) or in_array('--help', $argv)) {
    $section = function($str) {
        return str_color($str, 'brown') . PHP_EOL;
    };
    $option = function($str) {
        return '  '.str_color($str, 'green');
    };
    $val = function($str) {
        return str_color($str, 'cyan');
    };
    echo str_color('PHPCore', 'light_blue') . ' ' . str_color(CORE_VERSION, 'cyan') . ' (cli)' . PHP_EOL;
    echo PHP_EOL;
    echo $section('Usage:');
    echo '  phpcore [options] [--]' . PHP_EOL;
    echo '  phpcore [options] [-f] <file> [args...]' . PHP_EOL;
    echo '  phpcore [options] [-r] <code> [args...]' . PHP_EOL;
    echo PHP_EOL;
    echo $section('Configuration:');
    echo $option('-d').' '.$val('<sec>.<item>=<value>').' Define INI section directive with value'. PHP_EOL;
    echo $option('-c').' '.$val('<path>').'|'.$val('<file>').'        Use phpcore.ini file in this directory' . PHP_EOL;
    echo $option('-i|--information').'        PHPCore information' . PHP_EOL;
    echo $option('--ini-item=').$val('<sec>.<item>').' Return value of configuration item' . PHP_EOL;
    echo $option('--ini-paths').'             Show configuration file paths' . PHP_EOL;
    echo PHP_EOL;
    echo $section('Execute:');
    echo $option('-f').' '.$val('<file>').'               Parse and execute <file> through PHPCore' . PHP_EOL;
    echo $option('-r').' '.$val('<code>').'               Run PHP <code> through PHPCore' . PHP_EOL;
    echo PHP_EOL;
    echo $section('Output Format:');
    $format = $val('<format>');
    echo $option('--format='.$format).'       Output format (if available)' . PHP_EOL;
    echo PHP_EOL;
    echo $section('Miscellaneous:');
    echo $option('-h|--help').'               Display this help and exit' . PHP_EOL;
    echo $option('-v|--version').'            Version number' . PHP_EOL;
    echo $option('--atleast-version').' '.$val('<min>').' Checks that version is greater than min and exits' . PHP_EOL;
    // TODO: build and check with curl request
    //echo $option('--check-version').'         Check whether PHPCore is the latest version' . PHP_EOL;
    echo PHP_EOL;
    exit;
}

// =============================================================================
// OPTION: At Least Version >> EXIT
// =============================================================================
if (empty($options['atleast-version']) === false) {
    $parts = explode('.', $options['atleast-version']);
    if (CORE_MAJOR_VERSION < $parts[0]) exit(1);
    if (isset($parts[1])) {
        if (CORE_MINOR_VERSION < $parts[1]) exit(1);
    }
    if (isset($parts[2])) {
        if (CORE_RELEASE_VERSION < $parts[2]) exit(1);
    }
    exit;
}

// =============================================================================
// OPTION: Load Alternate Configuration
// =============================================================================
if (isset($options['c'])) {
    if (is_array($options['c']) === false) {
        $options['c'] = [$options['c']];
    }
    foreach ($options['c'] as $alt_ini_file) {
        if (is_file($alt_ini_file) === true) {
            $alt_ini_file = realpath($alt_ini_file);
        } elseif (is_dir($alt_ini_file)) {
            $alt_ini_file = realpath($alt_ini_file) . DIRECTORY_SEPARATOR . 'phpcore.ini';
        }
        if (is_readable($alt_ini_file) === false) {
            trigger_error(
                "{$alt_ini_file} is not a valid PHPCore ini file",
                E_USER_ERROR
            );
        }
        $GLOBALS['_CORE_INI'] = array_merge_recursive($GLOBALS['_CORE_INI'], parse_ini_file($alt_ini_file, true));
        $GLOBALS['_CORE']['CONFIG_FILES'] .= ",$alt_ini_file";
        $GLOBALS['_CORE']['CONFIG_FILE'] = $alt_ini_file;
    }
    foreach ($argv as $i=>$v) {
      if ($v === '-c') {
        unset($argv[$i]);
        unset($argv[$i+1]);
      }
    }
    unset($alt_ini_file);
    unset($i);
    unset($v);
}

// =============================================================================
// OPTION: INI configuration paths >> EXIT
// =============================================================================
if (isset($options['ini-paths']) === true) {
    echo str_replace(',', PHP_EOL, $GLOBALS['_CORE']['CONFIG_FILES']) . PHP_EOL;
    exit;
}

// =============================================================================
// OPTION: Define INI Section Directive
// =============================================================================
if (isset($options['d'])) {
    if (is_array($options['d']) === false) {
        $options['d'] = [$options['d']];
    }
    foreach ($options['d'] as $value) {
        $parts = explode('=', $value);
        $directive_parts = explode('.', $parts[0]);
        if (count($parts) !== 2 or count($directive_parts) < 2) {
            trigger_error(
                "Invalid syntax `$value` detected, use --help for proper syntax",
                E_USER_ERROR
            );
        }
        $section = $directive_parts[0];
        $directive = substr($parts[0], strlen($section)+1);
        $value = $parts[1];
        if (isset($GLOBALS['_CORE_INI'][$section]) === false) {
            $GLOBALS['_CORE_INI'][$section] = [];
        }
        $GLOBALS['_CORE_INI'][$section][$directive] = $value;
        $GLOBALS['_CORE']['DISABLE_FUNCTIONS'] = $GLOBALS['_CORE_INI']['PHPCore']['disable_functions'];
        $GLOBALS['_CORE']['DISABLE_CLASSES']   = $GLOBALS['_CORE_INI']['PHPCore']['disable_classes'];
    }
    foreach ($argv as $i=>$v) {
      if ($v === '-d') {
        unset($argv[$i]);
        unset($argv[$i+1]);
      }
    }
    unset($parts);
    unset($directive_parts);
    unset($section);
    unset($directive);
    unset($value);
    unset($i);
    unset($v);
}

// =============================================================================
// OPTION: Set format
// =============================================================================
if (empty($options['format']) === false) {
    $format = $GLOBALS['_CORE']['FORMAT'] = trim($options['format']);
    if (in_array($format, explode(',', core_ini_get('supported_formats'))) === false) {
        trigger_error(
            "Format '{$format}' is not supported",
            E_USER_ERROR
        ); 
    }
    unset($format);
}

// =============================================================================
// OPTION: Get INI Item >> EXIT
// =============================================================================
if (empty($options['ini-item']) === false) {
    $parts = explode('.', $options['ini-item']);
    $section = array_shift($parts);
    $directive = implode('.', $parts);
    echo core_ini_get($directive, $section);
    exit;
}

// =============================================================================
// OPTION: Output PHPCore information >> EXIT
// =============================================================================
if (in_array('-i', $argv) or in_array('--information', $argv)) {
    echo coreinfo();
    exit;
}

// =============================================================================
// OPTION: Parse and execute file >> EXIT
// =============================================================================
if (isset($options['f'])) {
    if (is_array($options['f']) === true) {
        trigger_error(
            "Detected multiple -f options, only one can be used. Use --help for proper syntax",
            E_USER_ERROR
        );
    }
    $_file = realpath($options['f']);
    if (is_readable($_file) === false) {
        trigger_error(
            "File {$options['f']} is not readable",
            E_USER_ERROR
        );
    }
    unset($options);
    include $_file;
    exit;
}

// =============================================================================
// OPTION: Run Code String >> EXIT
// =============================================================================
if (isset($options['r'])) {
    if (is_array($options['r']) === true) {
        trigger_error(
            "Detected multiple -r options, only one can be used. Use --help for proper syntax",
            E_USER_ERROR
        );
    }
    $_code = $options['r'];
    unset($options);
    eval($_code);
    exit;
}

// =============================================================================
// Process Code String of File >> EXIT
// =============================================================================
$last_argv = end($argv);
if (realpath($last_argv) !== __FILE__ and str_starts_with($last_argv, '-') === false) {
    $file_name = $last_argv;
    $_file = realpath($file_name);
    if (is_readable($_file) === false) {
      trigger_error(
          "File $file_name is not readable",
          E_USER_ERROR
      );
    }
    unset($file_name);
    unset($options);
    include $_file;
    exit;
}
unset($last_argv);

// =============================================================================
// Process Piped Code String
// =============================================================================
$_code = stream_get_contents(STDIN);
if (substr($_code, 0, 5) === '<?php') {
    $_code = substr($_code, 5);
}
eval($_code);

// EOF /////////////////////////////////////////////////////////////////////////////////////////////
